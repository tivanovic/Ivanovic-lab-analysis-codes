% PLOTALL2 - Script reads in a dataset and plots all of the individual
%            trajectories for selection of events by user.
%
%            Requires greenTraj and redTraj trajectories generated by imagesmooth data and 
%            analysis.
%
% To run from empty environment:
%            [tmp,dirname] = fileparts(pwd); load([dirname 'trajectories']);
%            plotall2

% Code updates:
% -------------
% 2009-07-03 - Added loading initial selected particles from previous save.
%            - Created help text at top of m file.
%            - Commented out option to print all figures.
% 2009-07-04 - Set figure plots to be maximized (manually)
% 2009-07-05 - Added smoothed hemifusion trajectory to plots to help user
%              verify smoothing
%            - Remove user prompt for pHdrop frame, get from previous data.
% 2018-06-27  - TI - Modified code to include a variable RollFact. It should be
% set at 0 for the code to analyze particle fluorescent trajectories
% starting at pH drop; if RollFact is non zero, the code with start analyzing at the
% frame of pH drop+the RollFact number of frames. This factor was added only
% for hemifusion analysis at this stage, for either dequenching or dissipation.


% %% 1) If available, load previously selected events from a saved datafile
% disp([mfilename ': Plotting all event trajectories to allow user to select actual events'])
% [pathstr,dirname] = fileparts(pwd);     % Find name of current folder
% aa = dir([dirname 'events*']);
% if(~isempty(aa))
% %     fprintf('There are %d saved event files (%sevents*.mat) in the current folder:\n', length(aa), dirname);
% %     for kk = 1:length(aa), disp(['     ' aa(k).name]), end
% %     fprintf('\nLoad which file as starting point? [BLANK for none, or type filename] : ');
% %     aa = input;
%     for kk = 1:length(aa),  aadates(kk) = datenum(aa(kk).date);  end;  idx = find(aadates == max(aadates));     % Find newest file
%     [filename,pathname] = uigetfile({[dirname 'events*.mat'],'MITHEMI event data file ([directoryname]events*.mat)'}, ...
%                                     'Select saved event file to load as starting point, or click CANCEL to start blank', aa(idx).name);
% %     if isequal(filename,0) || isequal(pathname,0)  % If there's no saved event data...
% %         selectHemiWinners = [];  selectPoreWinners = [];
% % %        selectWinners = {[],[]};   % Future compacted form.
% %     else
% % %        load(filename,'selectHemiWinners');
% %         load(filename);
% %     end
%     if ~(isequal(filename,0) || isequal(pathname,0))  % If there's saved event data...
%         load(filename);
%     end
% else
%     fprintf('No saved event data found in current folder.  Starting with blank selection.\n');
% %    selectHemiWinners = [];
% end
% if ~exist('selectHemiWinners','var'), selectHemiWinners = []; end;
% if ~exist('selectPoreWinners','var'), selectPoreWinners = []; end;


%% load or setup analysis configuration
%config file location
configfolder = ...
    '/Users/tijanai/Documents/Tijana MacBook Pro 2010to2015/tijanai/Public/Tijanaold/posao/steve harrison/matlabcodes/fusion_data_analysis/';
%      'H:\Public\Tijanaold\posao\steve harrison\matlabcodes\fusion_data_analysis\';
%     'D:\Tijana\posao\steve harrison\matlabcodes\fusion_data_analysis\';
%    'C:\Documents and Settings\Dan\My Documents\matlab m files\fusion_data_analysis\';
try %try to load config file
    load([configfolder 'fusion_config_settings'])
    disp('analysis settings:')
    disp('red channel')
    disp(channel.red)
    disp(' ')
    disp('green channel')
    disp(channel.green)
    disp(' ')
    if strcmp(channel.red.ID,channel.green.ID)==1;
        warning('content/lipid signals cannot be in the same channel!') %#ok<WNTAG>
    end
    disp(' ')
    disp('Change analysis settings?')
    update_config= input('y/n -->','s');
    if update_config=='y'
        disp('loading setup...')
        disp('.')
        disp('.')
        disp('.')
        fusion_analysis_setup %run configuration scripts
    end
catch
    disp('fusion_config_settings file not found')
    disp('loading setup...')
    disp('.')
    disp('.')
    disp('.')
    fusion_analysis_setup %run configuration scripts

end

%%
dataset=input('enter name of dataset: ','s');
description=input('enter description of experiment: ','s');
%pHdrop = input('enter the pH drop frame: '); %frames   % [20090705TIMP] Remove user prompt
%nphframe(2) = 20; % [091218TI] added value for the case where detectphdrop fails tragically
%pHdrop = nphframe(2);
pHdrop = input(sprintf('pHdrop is detected at frame %d.  Hit enter to accept or enter manual frame to override [Default: %d] : ',nphframe(2)*[1 1]));
if(isempty(pHdrop)),  pHdrop = nphframe(2);  end                                 % [20090705TIMP] Remove user prompt
%pHdrop = detect_ph_drop(ph(:,1), ph(:,3)); pHdrop = pHdrop(2);  % Take crossing point frame (second element of vector)

%% assign channels
%assign channels to hemifusion/poreformation and associate event marker
%with dequenching or signal dissipation

% %assign green channel
% if strcmp(channel.green.ID,'hemifusion')==1
%     hemifusion = greenTraj; hemiindex = idxgreenframes;
%     if strcmp(channel.green.signal,'dequenching')==1;
%         hemiEventMark = 'dequenching';
%     elseif strcmp(channel.green.signal,'dissipation')==1;
%         hemiEventMark = 'dissipation';
%     end
% elseif strcmp(channel.green.ID,'poreformation')==1
%     poreformation = greenTraj; poreindex = idxgreenframes;
%     if strcmp(channel.green.signal,'dequenching')==1;
%         poreEventMark = 'dequenching';
%     elseif strcmp(channel.green.signal,'dissipation')==1;
%         poreEventMark = 'dissipation';
%     end
% end
% 
% %assign red channel    
% if strcmp(channel.red.ID,'hemifusion')==1
%     hemifusion = redTraj; hemiindex = idxredframes;
%      if strcmp(channel.red.signal,'dequenching')==1;
%         hemiEventMark = 'dequenching';
%     elseif strcmp(channel.red.signal,'dissipation')==1;
%         hemiEventMark = 'dissipation';
%     end
% elseif strcmp(channel.red.ID,'poreformation')==1
%     poreformation = redTraj; poreindex = idxredframes;
%      if strcmp(channel.red.signal,'dequenching')==1;
%         poreEventMark = 'dequenching';
%     elseif strcmp(channel.red.signal,'dissipation')==1;
%         poreEventMark = 'dissipation';
%     end
% end

channelfields = fieldnames(channel);
for kk = 1:length(channelfields)  % Go through all channels ('red', 'green', etc.)
    ch = channel.(channelfields{kk});

    if ~isempty(ch.ID)
        switch ch.ID
            case 'hemifusion'
%                hemifusion = redTraj;    hemiindex = idxredframes;
                hemifusion    = eval([channelfields{kk} 'Traj']);               % Set to redTraj or greenTraj variable
                hemiindex     = eval(['idx' channelfields{kk} 'frames']);       % Set to idxredframes or idxgreenframes
                switch ch.signal
                    case 'dequenching'
                        hemiEventMark = 'dequenching';
                    case 'dissipation'
                        hemiEventMark = 'dissipation';
                end
            case 'poreformation'
%                poreformation = redTraj; poreindex = idxredframes;
                poreformation = eval([channelfields{kk} 'Traj']);
                poreindex     = eval(['idx' channelfields{kk} 'frames']);
                switch ch.signal
                    case 'dequenching'
                        poreEventMark = 'dequenching';
                    case 'dissipation'
                        poreEventMark = 'dissipation';
                end
        end
    end
end
clear kk channelfields ch


%% calculate max/min slope for display on plots
%Calculate max and min slopes for trajectories (sgolay derivatives)
%[derivData] = deriv(data,polyorder,nderiv,windowSize)
if exist('hemifusion','var')
    % Find frame closest to pHdrop time in this channel
% %    delta_t = pHdrop - hemiindex;                    % Look for closest frame number..
%    delta_t = timems(pHdrop) - timems(hemiindex);    % ..or for frame with closest time.
    delta_t = timems(idxgreenframes(pHdrop)) - timems(hemiindex);    % ..or for frame with closest time.
    idxclosest = find(delta_t == min(abs(delta_t(:))));
    pHdropHemi = idxclosest(1);

    windowSize = 15;     % [100730TI] used for 0.35 sec acquisition
%     windowSize = 5;     % [100111TI] reduced window size for long (1sec) acquisition experiments
%    windowSize = 5; %100806
%    windowSize = 11; %0.5sec acquisition; lower pHs 100906
%    windowSize = 31; %0.5sec acquisition; higher pHs 100906
%    windowSize = 51;    % [20090705TI] playing with smoothing - [100111TI] the setting I used in most of my analysis to date
%    windowSize = 21;    % [20090630TIMP] Zezanje sa window size..Dan's original setting; used for 0.2 sec acquisition
%    windowSize = 121;   % [20090702TI] vratila window size na 121, my original setting
    RollFact = 0;
    switch hemiEventMark
        case 'dequenching'
            hemifirstderiv = deriv(hemifusion,1,1,windowSize); %[derivData] = deriv(data,polyorder,nderiv,windowSize) 'sgolay deriv filter'
            [~, maxHemiDerivIndex] = max(hemifirstderiv(pHdropHemi+RollFact:end-windowSize,:)); 
            
        case 'dissipation'
            hemifirstderiv = deriv(hemifusion,1,1,windowSize);
            [~, maxHemiDerivIndex] = min(hemifirstderiv(pHdropHemi+RollFact:end-windowSize,:));
    end
    maxHemiDerivIndex = maxHemiDerivIndex + pHdropHemi + RollFact -1;

%    NumptsAvgStartIntensity = 20;       % [20090630] How many points before and including pHdrop to use for smoothing to find starting lipid dye intensity at each particle
    NumptsAvgStartIntensity = min(20,floor(pHdropHemi/2)*2);       % [20090630] How many points before and including pHdrop to use for smoothing to find starting lipid dye intensity at each particle
    hemiEventStartIntensity = mean( hemifusion([-NumptsAvgStartIntensity+1:0]+pHdropHemi,:), 1 );  % [20090630] Take NumptsAvg.. points up to pHdrop and average to know starting intensity of selected particles
end

if exist('poreformation','var')
    % Find frame closest to pHdrop time in this channel
% %    delta_t = pHdrop - poreindex;                    % Look for closest frame number..
%    delta_t = timems(pHdrop) - timems(poreindex);    % ..or for frame with closest time.
    delta_t = timems(idxgreenframes(pHdrop)) - timems(poreindex);    % ..or for frame with closest time.
    idxclosest = find(delta_t == min(abs(delta_t(:))));
    pHdropPore = idxclosest(1);

    windowSize  = 11; % [100112TI] increased value from 51 to used for 1sec acquisition movies
%    windowSize = 51; % [100112TI] this is a setting used in all previous
%    fluorescein dissipation experiment
    switch poreEventMark
        case 'dequenching'
            porefirstderiv = deriv(poreformation,1,1,windowSize); %[derivData] = deriv(data,polyorder,nderiv,windowSize) 'sgolay deriv filter'
            [~, maxPoreDerivIndex] = max(porefirstderiv(pHdropPore:end-windowSize,:));
        case 'dissipation'
            porefirstderiv = deriv(poreformation,1,1,windowSize);
            [~, maxPoreDerivIndex] = min(porefirstderiv(pHdropPore:end-windowSize,:));
    end
    maxPoreDerivIndex = maxPoreDerivIndex + pHdropPore-1; %the index is relative to the input limits!
    
    NumptsAvgStartIntensity = min(20,floor(pHdropPore/2)*2);       % [20090630] How many points before and including pHdrop to use for smoothing to find starting lipid dye intensity at each particle
    poreEventStartIntensity = mean( poreformation([-NumptsAvgStartIntensity+1:0]+pHdropPore,:), 1 );  % [20090630] Take NumptsAvg.. points up to pHdrop and average to know starting intensity of selected particles
end



% Run particle selection GUI
global centroid timems hemiindex hemifusion hemifirstderiv hemiEventStartIntensity ...
       pHdropHemi NumptsAvgStartIntensity ndrop tdrop maxHemiDerivIndex ...
       poreindex porefirstderiv poreEventStartIntensity ...
       pHdropPore maxPoreDerivIndex idxgreenframes pHdrop dataset % poreformation

partselgui2_20120611


% %% [20090703MP] Pre-mark in yellow the previously selected figures (by
% %  user) in chosen event file.
% %MARKERCOLOR = [1 1 0];                              % Selected particles marked yellow
% fprintf('Marking previously selected events: ');
% for kk = 1:length(selectHemiWinners)    % Togglemark pre-selected hemiwinners
%     hhobj = findobj((1:numFigures),'Tag',num2str(selectHemiWinners(kk)));
%     if(isempty(hhobj) || (length(hhobj) > 1))
%         fprintf('ERROR ');
%     else
% %        set(hhobj,'Color',MARKERCOLOR);
%         hh = get(hhobj,'Color'); set(hhobj,'Color',[1.8-hh(1) hh(2) hh(3)]);
%         fprintf([num2str(selectHemiWinners(kk)) '(' num2str(kk) ') ']);
%     end
% end
% for kk = 1:length(selectPoreWinners)    % Togglemark pre-selected porewinners
%     hhobj = findobj((1:numFigures),'Tag',num2str(selectPoreWinners(kk)));
%     if(isempty(hhobj) || (length(hhobj) > 1))
%         fprintf('ERROR ');
%     else
%         hh = get(hhobj,'Color'); set(hhobj,'Color',[hh(1) hh(2) 1.8-hh(3)]);
%         fprintf([num2str(selectPoreWinners(kk)) '(' num2str(kk) ') ']);
%     end
% end


%%
% disp('Next, please run collect_selected_particles_from_figures3.m, then run');
disp('fusion_analyzer.m to extract hemifusion and/or poreformation kinetics')

clear dataset description polyorder nderiv windowSize maxHemiDerivIndex... % maxHemiDeriv
      numParticles curfigure curplot curparticle savefiles... % minPoreDerivIndex minPoreDeriv
      answer savefiles configfolder  hemiEventMark hemifirstderiv ...
      pHdrop porefirstderiv  savefolder signalID maxPoreDerivIndex... % maxPoreDeriv 
      update_config
  %    numFigures
clear NumptsAvgStartIntensity hemiEventStartIntensity poreEventStartIntensity
